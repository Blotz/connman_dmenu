#!/bin/bash
SCAN_RESULT=/tmp/connman.scan
STORAGE_PATH=/var/lib/connman

get_services() {
    : > $SCAN_RESULT
    trap "rm -f $SCAN_RESULT" EXIT
    connmanctl scan wifi &>/dev/null
    IFS=$'\n'
    for line in $(connmanctl services | tr -s ' '); do
        local count="$(echo -n "$line" | sed 's/[^ ]//g' | wc -c)"
        (( count++ ))
        local name="$(echo "$line" | cut -d ' ' -f "2-$(( count - 3 ))" --output-delimiter _)"
        local service_id="$(echo "$line" | cut -d ' ' -f "$(( count - 1 ))")"
        echo "$name $service_id" >> $SCAN_RESULT
    done
}

count_services() {
    [[ -f $SCAN_RESULT ]] && wc -l < $SCAN_RESULT || echo 0
}

# $1 = name
name_to_service() {
    [[ -f $SCAN_RESULT ]] || exit 1
    grep "^$1 " -m 1 $SCAN_RESULT | cut -d ' ' -f 2
}

# $1 = service id
get_service_security() {
    echo "$1" | cut -d _ -f 5
}

# $1 = service id
get_service_signal() {
    connmanctl services "$1" | grep Strength | tr -s ' ' | cut -d ' ' -f 4
}

# $1 = service id
get_service_state() {
    connmanctl services "$1" | grep State | tr -s ' ' | cut -d ' ' -f 4
}

create_dmenu() {
    [[ -f $SCAN_RESULT ]] || exit 1
    IFS=$'\n'
    for line in $(cat $SCAN_RESULT); do
        local service_id="$(echo "$line" | cut -d ' ' -f 2)"
        local name="$(echo "$line" | cut -d ' ' -f 1)"
        local security="$(get_service_security "$service_id")"
        local signal="$(get_service_signal "$service_id")"

        echo "$name [security: $security] [signal: $signal]"
    done
}

# $1 = msg
dmenu_notify() {
    : | dmenu -p "$1 (press enter)"
}

if [[ $EUID != 0 ]]; then 
    dmenu_notify "Please run it as root"
    exit 1
fi

get_services
choice="$(create_dmenu | dmenu -l "$(count_services)" -i -p "Select one wifi service" | cut -d ' ' -f 1)"
service_id="$(name_to_service "$choice")"
[[ "$service_id" == "" ]] && exit 1
echo "$choice { $service_id }"

if [[ "online" == "$(get_service_state "$service_id")" ]]; then
    dmenu_notify "Already connected"
    exit 0
fi

security="$(get_service_security "$service_id")"
if [[ "$security" == none ]]; then
    # do nothing
    echo "no security"
elif [[ "$security" == ieee8021x || "$security" == psk || "$security" == wep ]]; then
    config_file="${STORAGE_PATH}/${choice}-${security}.config"
    identity=""
    password=""
    if [[ -f $config_file && "no" != "$(echo -e "yes\nno" | dmenu -p "Use previous profile?")" ]]; then
        echo "use old profile: $config_file"
    else
        # create service file
        [[ "$security" == ieee8021x ]] && identity="$(: | dmenu -p "Please provide identity")"
        password="$(: | dmenu -p "Please provide password")"

        if [[ "$password" == "" ]]; then
            dmenu_notify "Invalid identity or password"
            exit 1
        fi
        if [[ "$security" == ieee8021x ]]; then
        cat > $config_file <<EOF
[service_$service_id]
Type = wifi
Name = $choice
EAP = peap
Phase2 = MSCHAPV2
Identity = $identity
Passphrase = $password
EOF
        elif [[ "$security" == psk || "$security" == wep ]]; then 
        cat > $config_file <<EOF
[service_$service_id]
Type = wifi
Name = $choice
Passphrase = $password
EOF
        fi
    fi

fi

if [[ "Connected" == "$(connmanctl connect "$service_id")" ]]; then
    dmenu_notify "connected to $choice"
else
    dmenu_notify "cannot connect to $choice"
fi
